"""
Rendimo - Assistant IA Immobilier
Application Streamlit pour l'analyse d'investissements immobiliers avec export Excel

Version: 2.0 - Analyse d√©taill√©e avec export Excel
Auteur: Assistant IA
Date: Octobre 2024
"""

import streamlit as st
import pandas as pd
import os
import shutil
from datetime import datetime
from pathlib import Path

# Excel handling
from openpyxl import load_workbook

# Import des modules m√©tier
from utils.scraper import LeBonCoinScraper
from utils.calculator import RentabilityCalculator
from api.ai_assistant import AIAssistant
from api.price_api_dvf import DVFPriceAPI

# Configuration de la page
st.set_page_config(
    page_title="Rendimo - Assistant IA Immobilier",
    page_icon="üè†",
    layout="wide"
)

# CSS simplifi√©
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .chat-message {
        padding: 0.5rem;
        margin: 0.5rem 0;
        border-radius: 5px;
    }
    .user-message {
        background-color: #e3f2fd;
        border-left: 3px solid #2196f3;
    }
    .assistant-message {
        background-color: #f1f8e9;
        border-left: 3px solid #4caf50;
    }
</style>
""", unsafe_allow_html=True)

# Variables de session
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'property_data' not in st.session_state:
    st.session_state.property_data = None

def main():
    """
    Fonction principale de l'application Rendimo.
    
    Structure:
    - Interface √† 3 onglets pour analyse de biens immobiliers
    - Chat bot IA pour conseils personnalis√©s
    - Export Excel avec donn√©es fiscales d√©taill√©es
    """
    
    # ============================================================================
    # EN-T√äTE APPLICATION
    # ============================================================================
    st.markdown('<h1 class="main-header">üè† Rendimo - Assistant IA Immobilier</h1>', unsafe_allow_html=True)
    
    # Layout principal avec deux colonnes
    col1, col2 = st.columns([1, 1])
    
    # ============================================================================
    # COLONNE 1: ANALYSE DE BIEN
    # ============================================================================
    with col1:
        st.header("üîç Analyse de bien")
        
        # Interface √† 3 onglets
        tab1, tab2, tab3 = st.tabs(["üîó URL LeBonCoin", "üìù Saisie manuelle", "üìä Analyse d√©taill√©e"])
        
        # TAB 1: Scraping LeBonCoin avec disclaimer
        with tab1:
            st.write("**Analyser une annonce LeBonCoin :**")
            
            # Disclaimer d'usage responsable
            st.info("""
            ‚ö†Ô∏è **Utilisation responsable**
            - Usage limit√© √† 1-2 annonces par jour par utilisateur
            - Donn√©es √† usage personnel d'analyse uniquement
            - Respect des conditions d'utilisation de LeBonCoin
            - Aucune donn√©e personnelle du vendeur n'est collect√©e
            """)
            
            url_input = st.text_input(
                "URL de l'annonce :",
                placeholder="https://www.leboncoin.fr/ventes_immobilieres/...",
                help="Copiez l'URL compl√®te de l'annonce"
            )
            
            col_btn1, col_btn2 = st.columns([1, 1])
            
            with col_btn1:
                if st.button("Analyser l'annonce", type="primary"):
                    if url_input.strip():
                        analyze_property_from_url(url_input.strip())
                    else:
                        st.error("Veuillez entrer une URL valide")
            
            with col_btn2:
                if st.button("üìã Guide Inspecteur"):
                    show_inspector_guide()
        
        with tab2:
            st.write("**Saisie manuelle des donn√©es :**")
            manual_input_form()
        
        with tab3:
            st.write("**Analyse d√©taill√©e avec export Excel :**")
            detailed_analysis_form()
        
        st.divider()
        
    # Chat interface
    st.header("üí¨ Assistant IA")
    chat_interface()
    
    with col2:
        # Section R√©sultats avec estimation int√©gr√©e
        st.header("üìä Analyse & Estimation")
        results_interface()

def analyze_property_from_url(url):
    """Analyse une propri√©t√© √† partir de son URL LeBonCoin"""
    try:
        with st.spinner("üîç Extraction des donn√©es de l'annonce..."):
            scraper = LeBonCoinScraper()
            property_data = scraper.extract_property_data(url)
            
            if property_data and (property_data.get('title') or property_data.get('price')):
                st.session_state.property_data = property_data
                
                # Message de succ√®s
                success_msg = f"""‚úÖ **Donn√©es extraites avec succ√®s !**

**Bien analys√© :**
- üìç **Ville :** {property_data.get('city', 'Non sp√©cifi√©e')}
- üí∞ **Prix :** {property_data.get('price', 0):,}‚Ç¨
- üìê **Surface :** {property_data.get('surface', 0)} m¬≤
- üè† **Type :** {property_data.get('property_type', 'Non sp√©cifi√©')}
- üõèÔ∏è **Pi√®ces :** {property_data.get('rooms', 'Non sp√©cifi√©')}

Les calculs d'estimation apparaissent dans la colonne de droite ! üëâ"""
                
                add_chat_message("assistant", success_msg)
                st.success("‚úÖ Extraction r√©ussie ! Voir les r√©sultats √† droite.")
                
            else:
                st.error("‚ùå Impossible d'extraire les donn√©es")
                add_chat_message("assistant", """‚ùå **Extraction √©chou√©e**

üí° **Solutions :**
1. Utilisez l'onglet "Saisie manuelle"  
2. Consultez le "Guide Inspecteur" pour extraire manuellement
3. V√©rifiez que l'annonce existe encore

N'h√©sitez pas √† me poser vos questions directement ! üòä""")
    
    except Exception as e:
        st.error(f"‚ùå Erreur : {str(e)}")

def manual_input_form():
    """Formulaire de saisie manuelle"""
    with st.form("manual_form"):
        col_a, col_b = st.columns(2)
        
        with col_a:
            property_type = st.selectbox("Type", ["Appartement", "Maison", "Studio", "Autre"])
            price = st.number_input("Prix (‚Ç¨)", min_value=0, value=0, step=1000)
            surface = st.number_input("Surface (m¬≤)", min_value=0, value=0, step=1)
            
        with col_b:
            city = st.text_input("Ville", placeholder="ex: Surg√®res")
            rooms = st.number_input("Pi√®ces", min_value=0, value=0, step=1)
            postal_code = st.text_input("Code postal", placeholder="ex: 17700")
        
        if st.form_submit_button("Analyser ce bien", type="primary"):
            if price > 0 and surface > 0 and city:
                manual_data = {
                    'title': f"{property_type} {surface}m¬≤ - {city}",
                    'price': price,
                    'surface': surface,
                    'rooms': rooms,
                    'city': city,
                    'postal_code': postal_code,
                    'property_type': property_type,
                    'source_url': 'SAISIE_MANUELLE',
                    'extraction_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
                st.session_state.property_data = manual_data
                add_chat_message("assistant", f"‚úÖ **Bien ajout√© :** {property_type} {surface}m¬≤ √† {city} pour {price:,}‚Ç¨")
                st.success("‚úÖ Bien ajout√© ! Voir l'analyse √† droite.")
            else:
                st.error("‚ùå Veuillez remplir tous les champs obligatoires")

def show_inspector_guide():
    """Affiche le guide d'utilisation de l'inspecteur"""
    st.info("""**üîç Guide d'extraction manuelle :**
                    
1. **Ouvrir l'annonce** dans votre navigateur
2. **F12** pour ouvrir l'inspecteur  
3. **Console** ‚Üí Coller ce script :

```javascript
// Prix
const price = document.querySelector('[data-qa-id="adview_price"]')?.textContent;
console.log('Prix:', price);

// Surface  
const surface = document.body.textContent.match(/(\\d+)\\s*m¬≤/)?.[1];
console.log('Surface:', surface + ' m¬≤');

// Pi√®ces
const rooms = document.body.textContent.match(/(\\d+)\\s*pi√®ce/i)?.[1];
console.log('Pi√®ces:', rooms);
```

4. **Copier les r√©sultats** dans "Saisie manuelle"
                    
üìñ **Guide complet :** `GUIDE_INSPECTEUR.md`""")

def detailed_analysis_form():
    """
    Formulaire d'analyse d√©taill√©e avec export Excel.
    
    Collecte des informations suppl√©mentaires pour g√©n√©rer un fichier Excel
    personnalis√© avec les donn√©es du bien immobilier et les param√®tres
    fiscaux selon la structure d'investissement (Nom propre ou SCI).
    """
    
    # V√©rification des pr√©requis
    if not st.session_state.get('property_data'):
        st.warning("‚ö†Ô∏è Veuillez d'abord analyser un bien via l'onglet 'URL LeBonCoin' ou 'Saisie manuelle'")
        return
    
    property_data = st.session_state.property_data
    
    # Affichage du bien s√©lectionn√©
    st.info(f"""
    **üìã Bien s√©lectionn√© :**
    - **Titre :** {property_data.get('title', 'N/A')}
    - **Prix :** {property_data.get('price', 0):,}‚Ç¨
    - **Surface :** {property_data.get('surface', 0)} m¬≤
    - **Ville :** {property_data.get('city', 'N/A')}
    """)
    
    st.markdown("### üìä Informations suppl√©mentaires pour l'analyse")
    
    # Structure d'investissement - Hors formulaire pour mise √† jour temps r√©el
    st.subheader("üèõÔ∏è Structure d'investissement")
    type_investissement = st.selectbox(
        "Investissez-vous en nom propre ou via SCI ?", 
        options=["Nom propre", "SCI"], 
        index=0,
        key="type_investissement"
    )
    
    # Formulaire principal
    with st.form("detailed_analysis"):
        # Section 1: Caract√©ristiques du bien et financement
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üè† Caract√©ristiques du bien")
            type_bien = st.selectbox("Neuf ou Occasion ?", options=["Occasion", "Neuf"], index=0)
            loyer_hc = st.number_input("Loyer mensuel HC estim√© (‚Ç¨)", min_value=0, value=800, step=25)
            loyer_cc = st.number_input("Loyer mensuel CC estim√© (‚Ç¨)", min_value=0, value=850, step=25)
            cout_renovation = st.number_input("Co√ªt des travaux de r√©novation (‚Ç¨)", min_value=0, value=0, step=500)
            cout_construction = st.number_input("Co√ªt des travaux de construction (‚Ç¨)", min_value=0, value=0, step=500)
            
        with col2:
            st.subheader("üí∞ Financement")
            utilise_pret = st.selectbox("Vous utilisez un pr√™t ?", options=["Oui", "Non"], index=0)
            apport_default = int(property_data.get('price', 0) * 0.15)  # 15% du prix
            apport = st.number_input("Combien d'apport (‚Ç¨)", min_value=0, value=apport_default, step=1000)
            duree_pret = st.number_input("Dur√©e du pr√™t (ann√©es)", min_value=1, max_value=30, value=20, step=1)
            taux_pret = st.number_input("Taux du pr√™t (%)", min_value=0.0, max_value=10.0, value=4.0, step=0.1)
        
        # Variables pour stocker les donn√©es fiscales
        donnees_fiscales = {}
        
        if type_investissement == "Nom propre":
            st.markdown("---")
            st.markdown("**üìã Informations fiscales - Nom propre**")
            col_np1, col_np2 = st.columns(2)
            
            with col_np1:
                situation = st.selectbox("Situation ?", 
                                       options=["C√©libataire-divorc√©-veuf", "Mari√©-pacs√©"], 
                                       index=0)
                revenu_net = st.number_input("Revenu net global du foyer (‚Ç¨)", 
                                           min_value=0, value=50000, step=1000)
            
            with col_np2:
                nombre_enfants = st.number_input("Nombre d'enfants", 
                                               min_value=0, max_value=10, value=0, step=1)
            
            donnees_fiscales = {
                'type': 'nom_propre',
                'situation': situation,
                'revenu_net': revenu_net,
                'nombre_enfants': nombre_enfants
            }
        
        else:  # SCI
            st.markdown("---")
            st.markdown("**üè¢ Informations SCI**")
            col_sci1, col_sci2 = st.columns(2)
            
            with col_sci1:
                capital_sci = st.number_input("Capital de la SCI (‚Ç¨)", 
                                            min_value=0, value=1000, step=100)
                nombre_associes = st.number_input("Nombre d'associ√©s", 
                                                min_value=1, max_value=4, value=2, step=1)
            
            # Informations pour chaque associ√©
            associes = []
            for i in range(int(nombre_associes)):
                st.markdown(f"**üë§ Associ√© {i+1}**")
                col_a1, col_a2, col_a3, col_a4 = st.columns(4)
                
                with col_a1:
                    part = st.number_input(f"Part d√©tenue (%)", 
                                         min_value=0.0, max_value=100.0, 
                                         value=50.0 if i == 0 else 50.0, 
                                         step=1.0, key=f"part_{i}")
                
                with col_a2:
                    situation_assoc = st.selectbox(f"Situation", 
                                                 options=["C√©libataire-divorc√©-veuf", "Mari√©-pacs√©"], 
                                                 index=0, key=f"situation_{i}")
                
                with col_a3:
                    revenu_assoc = st.number_input(f"Revenu net (‚Ç¨)", 
                                                 min_value=0, value=50000, 
                                                 step=1000, key=f"revenu_{i}")
                
                with col_a4:
                    enfants_assoc = st.number_input(f"Enfants", 
                                                  min_value=0, max_value=10, 
                                                  value=0, step=1, key=f"enfants_{i}")
                
                associes.append({
                    'part': part,
                    'situation': situation_assoc,
                    'revenu': revenu_assoc,
                    'enfants': enfants_assoc
                })
            
            donnees_fiscales = {
                'type': 'sci',
                'capital': capital_sci,
                'nombre_associes': nombre_associes,
                'associes': associes
            }
        
        # Estimation √† la revente
        st.markdown("---")
        st.subheader("üìà Plus-value")
        estimation_revente_default = int(property_data.get('price', 0) * 1.2)  # 120% du prix
        estimation_revente = st.number_input("Estimation √† la revente (‚Ç¨)", 
                                           min_value=0, value=estimation_revente_default, step=5000)
        
        submitted = st.form_submit_button("üìÅ G√©n√©rer l'analyse Excel", type="primary")
        
        if submitted:
            # Cr√©er l'Excel avec les donn√©es
            excel_file = generate_excel_analysis(property_data, {
                'type_bien': type_bien,
                'loyer_hc': loyer_hc,
                'loyer_cc': loyer_cc,
                'utilise_pret': utilise_pret,
                'apport': apport,
                'duree_pret': duree_pret,
                'taux_pret': taux_pret,
                'cout_renovation': cout_renovation,
                'cout_construction': cout_construction,
                'donnees_fiscales': donnees_fiscales,
                'estimation_revente': estimation_revente
            })
            
            if excel_file:
                st.success("‚úÖ Analyse Excel g√©n√©r√©e avec succ√®s !")
                # Stocker le fichier dans session_state pour le t√©l√©chargement
                st.session_state['excel_file'] = excel_file
                st.session_state['excel_filename'] = f"Rendimo_Analyse_{property_data.get('city', 'Bien')}_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
    
    # Bouton de t√©l√©chargement en dehors du formulaire
    if 'excel_file' in st.session_state and st.session_state['excel_file']:
        with open(st.session_state['excel_file'], "rb") as file:
            st.download_button(
                label="üíæ T√©l√©charger l'analyse Excel",
                data=file.read(),
                file_name=st.session_state['excel_filename'],
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

def generate_excel_analysis(property_data, additional_data):
    """
    G√©n√®re un fichier Excel personnalis√© avec les donn√©es du bien immobilier.
    
    Args:
        property_data (dict): Donn√©es du bien (prix, surface, ville, etc.)
        additional_data (dict): Donn√©es suppl√©mentaires du formulaire
        
    Returns:
        str: Chemin vers le fichier Excel g√©n√©r√©, ou None en cas d'erreur
        
    Mapping des donn√©es:
        - Feuille "Frais de notaire": Prix (I3), Type bien (F3)
        - Feuille "Co√ªts et rendement": Loyers, pr√™t, travaux
        - Feuille "Nom propre - Fiscalit√©" ou "SCI": Donn√©es fiscales
        - Feuille "Plus value": Estimation revente (E7)
    """
    try:
        # V√©rification du template
        template_path = Path("Excel/Rendimmo - Rentabilit√©.xlsx")
        if not template_path.exists():
            st.error("‚ùå Fichier template Excel non trouv√©")
            return None
        
        # Ouverture directe du template et pr√©paration du fichier de sortie
        workbook = load_workbook(template_path)
        output_path = Path(f"temp_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx")
        
        # ============================================================================
        # SECTION 1: FEUILLE "FRAIS DE NOTAIRE"
        # ============================================================================
        if "Frais de notaire" in workbook.sheetnames:
            sheet_frais = workbook["Frais de notaire"]
            sheet_frais["I3"] = property_data.get('price', 0)  # Prix du bien
            sheet_frais["F3"] = additional_data.get('type_bien', 'Occasion')  # Type bien
        
        # ============================================================================
        # SECTION 2: FEUILLE "CO√õTS ET RENDEMENT"
        # ============================================================================
        sheet_cout = None
        for sheet_name in workbook.sheetnames:
            if "rendement" in sheet_name.lower():
                sheet_cout = workbook[sheet_name]
                break
        
        if sheet_cout:
            # Donn√©es locatives
            sheet_cout["D7"] = additional_data.get('loyer_hc', 0)      # Loyer HC
            sheet_cout["D8"] = additional_data.get('loyer_cc', 0)      # Loyer CC
            sheet_cout["D9"] = property_data.get('surface', 0)         # Surface
            
            # Donn√©es de financement
            sheet_cout["D14"] = additional_data.get('utilise_pret', 'Oui')     # Pr√™t
            sheet_cout["D15"] = additional_data.get('duree_pret', 20)          # Dur√©e
            sheet_cout["D16"] = additional_data.get('apport', 0)               # Apport
            sheet_cout["D17"] = additional_data.get('taux_pret', 4.0) / 100    # Taux
            
            # Donn√©es travaux
            sheet_cout["D21"] = additional_data.get('cout_renovation', 0)      # R√©novation
            sheet_cout["D22"] = additional_data.get('cout_construction', 0)    # Construction
        
        # ============================================================================
        # SECTION 3: DONN√âES FISCALES (NOM PROPRE OU SCI)
        # ============================================================================
        donnees_fiscales = additional_data.get('donnees_fiscales', {})
        
        if donnees_fiscales.get('type') == 'nom_propre':
            # Feuille "Nom propre - Fiscalit√©"
            if "Nom propre - Fiscalit√©" in workbook.sheetnames:
                sheet_np = workbook["Nom propre - Fiscalit√©"]
                sheet_np["D6"] = donnees_fiscales.get('revenu_net', 50000)    # Revenu net
                sheet_np["D7"] = donnees_fiscales.get('situation', 'C√©libataire-divorc√©-veuf')  # Situation
                sheet_np["D8"] = donnees_fiscales.get('nombre_enfants', 0)    # Enfants
        
        elif donnees_fiscales.get('type') == 'sci':
            # Feuille "SCI"
            if "SCI" in workbook.sheetnames:
                sheet_sci = workbook["SCI"]
                sheet_sci["D6"] = donnees_fiscales.get('capital', 1000)  # Capital SCI
                
                # Donn√©es des associ√©s (maximum 4)
                associes = donnees_fiscales.get('associes', [])
                colonnes = ['D', 'E', 'F', 'G']  # Colonnes pour associ√©s 1-4
                
                for i, associe in enumerate(associes[:4]):
                    col = colonnes[i]
                    sheet_sci[f"{col}8"] = associe.get('part', 50) / 100      # Part (%)
                    sheet_sci[f"{col}10"] = associe.get('revenu', 50000)       # Revenu
                    sheet_sci[f"{col}11"] = associe.get('situation', 'C√©libataire-divorc√©-veuf')  # Situation
                    sheet_sci[f"{col}12"] = associe.get('enfants', 0)          # Enfants
        
        # ============================================================================
        # SECTION 4: FEUILLE "PLUS VALUE"
        # ============================================================================
        if "Plus value" in workbook.sheetnames:
            sheet_pv = workbook["Plus value"]
            sheet_pv["E7"] = additional_data.get('estimation_revente', 0)  # Estimation revente
        
        # Sauvegarde du fichier Excel
        workbook.save(output_path)
        workbook.close()
        
        return str(output_path)
        
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la g√©n√©ration Excel : {str(e)}")
        return None

def chat_interface():
    """Interface de chat classique orient√©e immobilier (Streamlit chat)."""

    # Initialiser/afficher l'√©tat de la connexion IA
    if 'assistant' not in st.session_state:
        st.session_state.assistant = AIAssistant()
    assistant: AIAssistant = st.session_state.assistant

    # Bandeau d'√©tat du backend IA
    backend = ""
    if getattr(assistant, 'groq_client', None):
        backend = f"Groq ¬∑ Mod√®le: {getattr(assistant, 'groq_model', 'n/a')} ¬∑ Temp√©rature: {getattr(assistant, 'generation_temperature', 'n/a')}"
        st.caption(f"Connexion IA: {backend}")
    elif getattr(assistant, 'openai_client', None):
        backend = f"OpenAI ¬∑ Mod√®le: {getattr(assistant, 'openai_model', 'n/a')} ¬∑ Temp√©rature: {getattr(assistant, 'generation_temperature', 'n/a')}"
        st.caption(f"Connexion IA: {backend}")
    else:
        st.caption("Connexion IA: mode local (fallback)")

    # Replay de l'historique en bulles de chat
    for msg in st.session_state.chat_history:
        with st.chat_message(msg['role']):
            st.markdown(msg['content'])

    # Entr√©e utilisateur en bas, style chat
    prompt = st.chat_input("Posez votre question (ex: Qu'est-ce qu'une SCI ? Diff√©rence LMNP vs LMP ?)" )
    if prompt:
        # Afficher et stocker la requ√™te utilisateur
        st.session_state.chat_history.append({
            'role': 'user',
            'content': prompt,
            'timestamp': datetime.now().isoformat()
        })
        with st.chat_message("user"):
            st.markdown(prompt)

        # Obtenir la r√©ponse de l'assistant avec contexte du bien
        with st.chat_message("assistant"):
            with st.spinner("R√©daction de la r√©ponse‚Ä¶"):
                reply = assistant.get_response(
                    prompt,
                    st.session_state.chat_history,
                    st.session_state.property_data
                )
                st.markdown(reply)
        # Stocker la r√©ponse
        st.session_state.chat_history.append({
            'role': 'assistant',
            'content': reply,
            'timestamp': datetime.now().isoformat()
        })
        # Pas de st.rerun ici, l'UI de chat g√®re le flux

def results_interface():
    """Interface des r√©sultats avec estimation int√©gr√©e"""
    
    if st.session_state.property_data:
        property_data = st.session_state.property_data
        
        # R√©sum√© du bien
        st.subheader("üè† Bien analys√©")
        
        col_r1, col_r2 = st.columns(2)
        with col_r1:
            st.metric("Prix", f"{property_data.get('price', 0):,}‚Ç¨")
            st.metric("Surface", f"{property_data.get('surface', 0)} m¬≤")
        with col_r2:
            if property_data.get('price', 0) > 0 and property_data.get('surface', 0) > 0:
                price_per_sqm = property_data['price'] / property_data['surface']
                st.metric("Prix/m¬≤", f"{price_per_sqm:,.0f}‚Ç¨")
            st.metric("Pi√®ces", property_data.get('rooms', 'N/A'))
        
        st.divider()

        # Estimation via API int√©gr√©e
        st.subheader("üí∞ Estimation de march√©")

        if st.button("üîç Estimer avec donn√©es locales"):
            estimate_with_api(property_data)

        # Calculs de rentabilit√© avec saisie du loyer
        st.subheader("üìä Analyse de rentabilit√©")

        if property_data.get('price', 0) > 0 and property_data.get('surface', 0) > 0:
            # Champ de saisie du loyer estim√©
            loyer_suggest = int(property_data['price'] * 0.008)  # Suggestion 0.8% du prix
            
            monthly_rent = st.number_input(
                "üí∂ Loyer mensuel estim√© (‚Ç¨)",
                min_value=0,
                value=loyer_suggest,
                step=50,
                help="Estimez le loyer mensuel que vous pourriez obtenir"
            )
            
            if monthly_rent > 0:
                # Utiliser le calculator
                calculator = RentabilityCalculator()
                result = calculator.calculate_gross_yield(property_data['price'], monthly_rent)
                
                if 'error' not in result:
                    col_calc1, col_calc2, col_calc3 = st.columns(3)
                    with col_calc1:
                        st.metric("Loyer annuel", f"{result['annual_rent']:,.0f}‚Ç¨")
                    with col_calc2:
                        st.metric("Rentabilit√© brute", f"{result['gross_yield']:.2f}%")
                    with col_calc3:
                        st.metric("√âvaluation", result['evaluation'])
                else:
                    st.warning(f"‚ö†Ô∏è {result['error']}")

        # Bouton r√©initialiser
        if st.button("üîÑ Nouvelle analyse"):
            st.session_state.property_data = None
            st.rerun()
            
    else:
        st.info("üëà Analysez un bien pour voir les r√©sultats ici")
        
        # Aide rapide
        st.markdown("""
        **Comment utiliser Rendimo :**
        
        1. üîó **Collez une URL** LeBonCoin dans l'onglet correspondant
        2. üìù **Ou saisissez manuellement** les donn√©es du bien
        3. üìä **Consultez l'analyse** qui appara√Ætra ici
        4. üí¨ **Posez vos questions** √† l'assistant IA
        """)

def estimate_with_api(property_data):
    """Estime un bien via SimplePriceAPI avec score de fiabilit√©"""
    try:
        with st.spinner("üîç Estimation en cours..."):
            # Pr√©-requis
            surface = property_data.get('surface', 0)
            price = property_data.get('price', 0)
            if surface <= 0:
                st.warning("‚ö†Ô∏è Surface requise pour l'estimation")
                return

            city = property_data.get('city', '') or ''
            postal_code = property_data.get('postal_code', None)
            raw_type = (property_data.get('property_type') or '').lower()

            # Mapping type LeBonCoin ‚Üí DVF (apartment|house|other)
            if 'maison' in raw_type or 'villa' in raw_type:
                api_type = 'house'
            elif 'appartement' in raw_type or 'studio' in raw_type or 'duplex' in raw_type:
                api_type = 'apartment'
            elif 'terrain' in raw_type or 'parking' in raw_type or 'garage' in raw_type:
                api_type = 'other'
            else:
                # Fallback par d√©faut : appartement pour tout le reste
                api_type = 'apartment'

            api = DVFPriceAPI(use_lite=False)  # Utilise la base FULL avec toutes les villes
            market = api.get_price_estimate(city=city, postal_code=postal_code, property_type=api_type)

            if market.get('error'):
                st.info("‚ÑπÔ∏è Aucune estimation disponible pour cette commune.")
                add_chat_message("assistant", "‚ÑπÔ∏è Impossible d'estimer le prix pour cette zone.")
                return

            # Sauvegarde en session pour chatbot/usage ult√©rieur
            st.session_state['market_data'] = market

            # Affichage simplifi√© des m√©triques march√©
            st.markdown("### üìà March√© local")
            m1, m2, m3 = st.columns([2, 1, 1])
            with m1:
                st.metric("Prix moyen ‚Ç¨/m¬≤", f"{market.get('price_per_sqm', 0):,}‚Ç¨")
            with m2:
                # Score de fiabilit√© avec indicateur visuel
                reliability = market.get('reliability_score', 0)
                transaction_count = market.get('transaction_count', 0)
                if reliability >= 85:
                    icon = "üü¢"
                elif reliability >= 70:
                    icon = "üü°"
                else:
                    icon = "üü†"
                st.metric("Fiabilit√©", f"{icon} {reliability}% ({transaction_count} trans.)")
            with m3:
                st.caption("**Source:**")
                st.caption(market.get('source', 'N/A'))

            # Comparaison du bien vs march√©
            st.markdown("### üßÆ Comparaison du bien")
            cmp_res = api.compare_property_price(property_price=price, property_surface=surface, market_data=market)
            if 'error' in cmp_res:
                st.warning(f"‚ö†Ô∏è {cmp_res['error']}")
            else:
                k1, k2, k3 = st.columns(3)
                with k1:
                    st.metric("Prix du bien ‚Ç¨/m¬≤", f"{cmp_res['property_price_per_sqm']:.0f}‚Ç¨")
                with k2:
                    st.metric("√âcart vs march√©", f"{cmp_res['percentage_difference']:+.1f}%")
                with k3:
                    st.metric("√âvaluation", cmp_res.get('score', 'N/A'))

            # Message chatbot avec source et fiabilit√©
            add_chat_message(
                "assistant",
                f"üìä Estimation affich√©e pour {city} ({api_type}). "
                f"Prix moyen: {market.get('price_per_sqm', 'N/A')}‚Ç¨/m¬≤ ‚Äî "
                f"Source: {market.get('source', 'N/A')} ‚Äî "
                f"Fiabilit√©: {market.get('reliability_score', 'N/A')}%"
            )

    except Exception as e:
        st.error(f"‚ùå Erreur estimation : {str(e)}")

def handle_chat_message(message):
    """Traite un message de chat"""
    try:
        # Ajouter le message utilisateur
        add_chat_message("user", message)
        
        # Initialiser l'assistant IA
        assistant = AIAssistant()
        
        # Obtenir la r√©ponse
        response = assistant.get_response(
            message, 
            st.session_state.chat_history,
            st.session_state.property_data
        )
        
        # Ajouter la r√©ponse
        add_chat_message("assistant", response)
        
        st.rerun()
        
    except Exception as e:
        add_chat_message("assistant", f"‚ùå Erreur : {str(e)}")
        st.rerun()

def add_chat_message(role, content):
    """Ajoute un message au chat"""
    st.session_state.chat_history.append({
        'role': role,
        'content': content,
        'timestamp': datetime.now().isoformat()
    })

if __name__ == "__main__":
    main()