"""
Assistant IA conversationnel pour Rendimo
Int√©gration avec Groq et OpenAI pour les conseils immobiliers

Auteur: Assistant IA
Date: Octobre 2024
"""

import logging
import os
import re
from typing import Dict, List, Optional, Any
from datetime import datetime
import json

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Imports conditionnels des APIs
try:
    # Chargement optionnel des variables d'environnement depuis .env
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    # Pas bloquant si python-dotenv n'est pas install√©
    pass
try:
    import groq
    GROQ_AVAILABLE = True
except ImportError:
    GROQ_AVAILABLE = False
    logger.warning("groq non disponible")

try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    logger.warning("openai non disponible")

class AIAssistant:
    """
    Assistant IA conversationnel sp√©cialis√© en immobilier
    
    Cette classe fournit un chatbot intelligent capable de :
    - R√©pondre aux questions sur l'investissement immobilier
    - Analyser les donn√©es des biens
    - Donner des conseils personnalis√©s
    - Guider l'utilisateur dans son questionnaire
    """
    
    def __init__(self):
        """Initialise l'assistant IA avec les cl√©s API disponibles"""
        self.groq_client = None
        self.openai_client = None
        self.groq_model = os.getenv("GROQ_MODEL", "llama-3.1-8b-instant")
        self.openai_model = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
        # Temp√©rature plus basse pour des r√©ponses plus pr√©cises et coh√©rentes
        self.generation_temperature = float(os.getenv("AI_TEMPERATURE", "0.2"))
        
        # Configuration Groq
        groq_api_key = os.getenv('GROQ_API_KEY')
        if groq_api_key and GROQ_AVAILABLE:
            try:
                self.groq_client = groq.Groq(api_key=groq_api_key)
                logger.info("Client Groq initialis√©")
            except Exception as e:
                logger.error(f"Erreur initialisation Groq: {str(e)}")
        
        # Configuration OpenAI
        openai_api_key = os.getenv('OPENAI_API_KEY')
        if openai_api_key and OPENAI_AVAILABLE:
            try:
                self.openai_client = openai.OpenAI(api_key=openai_api_key)
                logger.info("Client OpenAI initialis√©")
            except Exception as e:
                logger.error(f"Erreur initialisation OpenAI: {str(e)}")
        
        # Messages syst√®me pour contextualiser l'assistant
        self.system_prompt = self._get_system_prompt()
        
        # √âtat de la conversation
        self.conversation_state = {
            'questionnaire_active': False,
            'current_question': None,
            'collected_answers': {}
        }
        
        logger.info("Assistant IA Rendimo initialis√©")
    
    def _get_system_prompt(self) -> str:
        """
        D√©finit le prompt syst√®me pour contextualiser l'assistant
        
        Returns:
            str: Prompt syst√®me complet
        """
        return """Tu es Rendimo, un assistant IA sp√©cialis√© dans l'investissement immobilier fran√ßais.

Ton r√¥le :
- Aider les particuliers et investisseurs √† analyser des biens immobiliers
- Fournir des conseils sur la rentabilit√© locative
- Expliquer les calculs financiers de mani√®re simple
- Guider les utilisateurs dans leurs d√©cisions d'investissement
- R√©pondre √† TOUTES les questions li√©es √† l'immobilier

Tes comp√©tences :
- Analyse de rentabilit√© (brute, nette, cash-flow, ROI)
- Connaissance du march√© immobilier fran√ßais
- Fiscalit√© immobili√®re (SCI, LMNP, r√©gimes fiscaux)
- Financement immobilier et n√©gociation bancaire
- Gestion locative et droit immobilier
- Frais de notaire, assurances, diagnostics
- Strat√©gies d'investissement et diversification
- R√©novation et travaux
- Estimation de biens et n√©gociation

Questions fr√©quentes que tu peux traiter :
- "Quels sont les frais de notaire pour un achat ?"
- "Comment calculer la rentabilit√© locative ?"
- "Qu'est-ce qu'une SCI et ses avantages ?"
- "Comment n√©gocier le prix d'un bien ?"
- "Quelles sont les charges d√©ductibles ?"
- "Comment obtenir le meilleur taux de cr√©dit ?"
- "Que v√©rifier avant d'acheter ?"
- "Comment estimer le loyer de march√© ?"

Ton style :
- Conversationnel et naturel
- Professionnel mais accessible
- P√©dagogique et bienveillant
- Pr√©cis dans les chiffres avec exemples concrets
- Toujours mentionner les risques et limites
- Encourager √† consulter des professionnels pour les d√©cisions importantes

Utilise des √©mojis pour rendre tes r√©ponses plus claires :
üè† pour les biens immobiliers
üí∞ pour les aspects financiers
üìä pour les analyses et calculs
‚ö†Ô∏è pour les avertissements
‚úÖ pour les points positifs
üîç pour les analyses d√©taill√©es
üìã pour les listes et √©tapes
üí° pour les conseils et astuces
üéØ pour les objectifs
üìû pour les contacts professionnels

R√©ponds toujours en fran√ßais et adapte ton niveau selon le niveau de connaissance apparent de l'utilisateur.
Si on te pose une question qui n'est pas li√©e √† l'immobilier, oriente poliment la conversation vers ton domaine d'expertise.

Directives sp√©cifiques SCI / LMNP / LMP (mise √† jour 2025) :
- Si la question contient des termes comme "sci", "lmnp", "lmp", "meubl√©", "statut", "fiscalit√©", r√©ponds de fa√ßon structur√©e :
    1) D√©finition et objectif
    2) Conditions d'√©ligibilit√© / seuils (ex: LMP si recettes > 23 000‚Ç¨ ET > autres revenus professionnels du foyer)
    3) R√©gime fiscal (micro-BIC vs r√©el, amortissements, d√©ficits)
    4) Cotisations sociales (pr√©l√®vements sociaux LMNP vs cotisations SSI pour LMP)
    5) Plus-values √† la revente (priv√©es LMNP vs professionnelles LMP, exemptions possibles)
    6) Avantages / limites et quand choisir
    7) Exemple chiffr√© simple (si pertinent)
- Corrige gentiment les fautes usuelles (ex: "LMNA" ‚Üí "LMNP") et clarifie les acronymes d√®s la premi√®re mention.
- Pour la SCI :
    ‚Ä¢ Par d√©faut, la SCI est √† l'IR et convient surtout au nu; le meubl√© r√©gulier rend l'activit√© commerciale ‚Üí risque d'IS (ou opter pour l'IS).
    ‚Ä¢ Expose clairement les impacts d'une SCI √† l'IS (amortissements, fiscalit√© des dividendes, plus-values professionnelles) vs IR.
    ‚Ä¢ Mentionne les alternatives (SARL de famille) pour de la location meubl√©e si pertinent.

Toujours proposer une courte mise en garde : la fiscalit√© √©volue et un avis d'expert-comptable est recommand√© pour arbitrer.
"""

    def _normalize_user_message(self, text: str) -> str:
        """Normalise certaines abr√©viations/fautes fr√©quentes pour aider l'IA.

        Exemples: LMNA -> LMNP, lmna -> LMNP, lmnp/lmp en majuscules.
        """
        try:
            normalized = text
            # Corriger LMNA (faute fr√©quente) vers LMNP
            normalized = re.sub(r"\bLMNA\b", "LMNP", normalized, flags=re.IGNORECASE)
            # Uniformiser LMNP/LMP en majuscules
            normalized = re.sub(r"\blmnp\b", "LMNP", normalized, flags=re.IGNORECASE)
            normalized = re.sub(r"\blmp\b", "LMP", normalized, flags=re.IGNORECASE)
            # Uniformiser SCI en majuscules
            normalized = re.sub(r"\bsci\b", "SCI", normalized, flags=re.IGNORECASE)
            return normalized
        except Exception:
            return text
    
    def get_response(self, 
                    user_message: str,
                    chat_history: List[Dict],
                    property_data: Optional[Dict] = None) -> str:
        """
        G√©n√®re une r√©ponse √† un message utilisateur
        
        Args:
            user_message (str): Message de l'utilisateur
            chat_history (List[Dict]): Historique de la conversation
            property_data (Optional[Dict]): Donn√©es du bien analys√©
            
        Returns:
            str: R√©ponse de l'assistant
        """
        logger.info(f"G√©n√©ration de r√©ponse pour: {user_message[:50]}...")
        
        try:
            # Construction du contexte
            context = self._build_context(chat_history, property_data)

            # Normalisation de la question (fautes usuelles)
            user_message = self._normalize_user_message(user_message)

            # R√©ponses d√©terministes pour th√®mes sensibles (plus pr√©cises)
            lower_q = user_message.lower()
            if "sci" in lower_q:
                return self._get_sci_info()
            if any(k in lower_q for k in ["lmnp", "lmp", "meubl"]):
                return self._get_lmnp_vs_lmp_info()
            
            # Tentative avec Groq en priorit√©
            if self.groq_client:
                response = self._get_groq_response(user_message, context)
                if response:
                    return response
            
            # Fallback sur OpenAI
            if self.openai_client:
                response = self._get_openai_response(user_message, context)
                if response:
                    return response
            
            # Fallback ultime : r√©ponse intelligente sans IA
            return self._get_fallback_response(user_message, property_data)
            
        except Exception as e:
            logger.error(f"Erreur lors de la g√©n√©ration de r√©ponse: {str(e)}")
            return self._get_error_response()
    
    def _build_context(self, 
                      chat_history: List[Dict], 
                      property_data: Optional[Dict]) -> str:
        """
        Construit le contexte pour l'IA
        
        Args:
            chat_history: Historique des messages
            property_data: Donn√©es du bien
            
        Returns:
            str: Contexte format√©
        """
        context_parts = []
        
        # Ajout des donn√©es du bien si disponibles
        if property_data:
            context_parts.append("BIEN ANALYS√â:")
            context_parts.append(f"- Ville: {property_data.get('city', 'N/A')}")
            context_parts.append(f"- Prix: {property_data.get('price', 'N/A')}‚Ç¨")
            context_parts.append(f"- Surface: {property_data.get('surface', 'N/A')} m¬≤")
            context_parts.append(f"- Type: {property_data.get('property_type', 'N/A')}")
            if property_data.get('rooms'):
                context_parts.append(f"- Pi√®ces: {property_data['rooms']}")
            context_parts.append("")
        
        # Ajout de l'historique r√©cent (derniers 5 messages)
        if chat_history:
            context_parts.append("HISTORIQUE R√âCENT:")
            for message in chat_history[-5:]:
                role = "Utilisateur" if message['role'] == 'user' else "Assistant"
                context_parts.append(f"{role}: {message['content'][:100]}...")
            context_parts.append("")
        
        return '\n'.join(context_parts)
    
    def _get_groq_response(self, user_message: str, context: str) -> Optional[str]:
        """
        Obtient une r√©ponse via l'API Groq
        
        Args:
            user_message: Message utilisateur
            context: Contexte de la conversation
            
        Returns:
            Optional[str]: R√©ponse ou None en cas d'erreur
        """
        try:
            messages = [
                {"role": "system", "content": self.system_prompt},
                {"role": "system", "content": f"CONTEXTE:\n{context}"},
                {"role": "user", "content": user_message}
            ]
            
            response = self.groq_client.chat.completions.create(
                model=self.groq_model,  # Mod√®le Groq configurable (par d√©faut 70B)
                messages=messages,
                temperature=self.generation_temperature,
                max_tokens=1000,
                top_p=1,
                stream=False
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            logger.error(f"Erreur Groq: {str(e)}")
            return None
    
    def _get_openai_response(self, user_message: str, context: str) -> Optional[str]:
        """
        Obtient une r√©ponse via l'API OpenAI
        
        Args:
            user_message: Message utilisateur
            context: Contexte de la conversation
            
        Returns:
            Optional[str]: R√©ponse ou None en cas d'erreur
        """
        try:
            messages = [
                {"role": "system", "content": self.system_prompt},
                {"role": "system", "content": f"CONTEXTE:\n{context}"},
                {"role": "user", "content": user_message}
            ]
            
            response = self.openai_client.chat.completions.create(
                model=self.openai_model,  # Mod√®le OpenAI configurable
                messages=messages,
                temperature=self.generation_temperature,
                max_tokens=1000
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            logger.error(f"Erreur OpenAI: {str(e)}")
            return None
    
    def _get_fallback_response(self, 
                              user_message: str, 
                              property_data: Optional[Dict]) -> str:
        """
        G√©n√®re une r√©ponse intelligente sans IA externe
        
        Args:
            user_message: Message utilisateur
            property_data: Donn√©es du bien
            
        Returns:
            str: R√©ponse de fallback
        """
        message_lower = user_message.lower()
        
        # Questions sp√©cifiques SCI
        if "sci" in message_lower:
            return self._get_sci_info()

        # Questions LMNP / LMP / meubl√©
        if any(k in message_lower for k in ["lmnp", "lmp", "meubl"]):
            return self._get_lmnp_vs_lmp_info()

        # Questions sur les frais de notaire
        if any(word in message_lower for word in ['frais de notaire', 'notaire', 'frais d\'acquisition', 'frais achat']):
            return self._get_notary_fees_info()
        
        # Questions sur la rentabilit√©
        elif any(word in message_lower for word in ['rentabilit√©', 'rendement', 'yield']):
            return self._get_rentability_advice(property_data)
        
        # Questions sur le cashflow
        elif any(word in message_lower for word in ['cashflow', 'cash-flow', 'flux']):
            return self._get_cashflow_advice(property_data)
        
        # Questions sur les prix et n√©gociation
        elif any(word in message_lower for word in ['prix', 'cher', 'march√©', 'n√©gocier', 'n√©gociation']):
            return self._get_price_advice(property_data)
        
        # Questions sur l'investissement g√©n√©ral
        elif any(word in message_lower for word in ['investissement', 'investir', 'achat', 'commencer']):
            return self._get_investment_advice()
        
        # Questions fiscales et SCI
        elif any(word in message_lower for word in ['fiscalit√©', 'imp√¥t', 'sci', 'lmnp', 'd√©ficit foncier']):
            return self._get_tax_advice()
        
        # Questions sur le financement
        elif any(word in message_lower for word in ['financement', 'pr√™t', 'cr√©dit', 'banque', 'taux']):
            return self._get_financing_advice()
        
        # Questions sur les assurances
        elif any(word in message_lower for word in ['assurance', 'pno', 'gli', 'multirisque']):
            return self._get_insurance_advice()
        
        # Questions sur la gestion locative
        elif any(word in message_lower for word in ['gestion locative', 'locataire', 'bail', 'loyer']):
            return self._get_rental_management_advice()
        
        # Questions sur les travaux
        elif any(word in message_lower for word in ['travaux', 'r√©novation', 'r√©habilitation']):
            return self._get_renovation_advice()
        
        # Questions sur les diagnostics
        elif any(word in message_lower for word in ['diagnostic', 'dpe', 'amiante', 'plomb']):
            return self._get_diagnostics_info()
        
        # Questions sur la copropri√©t√©
        elif any(word in message_lower for word in ['copropri√©t√©', 'syndic', 'ag', 'charges']):
            return self._get_copropriety_advice()
        
        else:
            return self._get_general_response()

    def _get_sci_info(self) -> str:
        """Explication structur√©e de la SCI (IR/IS, usages, limites)."""
        return (
            "üèõÔ∏è Qu'est-ce qu'une SCI (Soci√©t√© Civile Immobili√®re) ?\n\n"
            "D√©finition: Structure juridique pour d√©tenir et g√©rer un patrimoine immobilier √† plusieurs (ou seul).\n\n"
            "üéØ Objectifs courants:\n"
            "‚Ä¢ Gestion familiale d'un bien\n"
            "‚Ä¢ Transmission (donations, d√©membrement) facilit√©e\n"
            "‚Ä¢ Mutualiser l'investissement entre associ√©s\n\n"
            "üìö R√©gimes fiscaux:\n"
            "‚Ä¢ Par d√©faut: SCI √† l'IR (imp√¥t sur le revenu) ‚Üí adapt√©e √† la location nue (revenus fonciers).\n"
            "‚Ä¢ √Ä l'IS (option ou bascule si activit√© commerciale): adapt√©e si amortissements recherch√©s, mais\n"
            "  fiscalit√© diff√©rente √† la revente (plus-values professionnelles) et double niveau d'imposition (IS + dividendes).\n\n"
            "üõãÔ∏è Location meubl√©e et SCI:\n"
            "‚Ä¢ Une SCI √† l'IR n'est pas faite pour du meubl√© r√©gulier (activit√© commerciale).\n"
            "‚Ä¢ Si meubl√© r√©current: risque d'assujettissement √† l'IS. Alternatives: SARL de famille au r√©el, LMNP/LMP en nom propre.\n\n"
            "‚úÖ Avantages:\n"
            "‚Ä¢ Souplesse statutaire (pactes entre associ√©s)\n"
            "‚Ä¢ Transmission progressive (donations de parts)\n"
            "‚Ä¢ S√©paration patrimoine perso / immobilier\n\n"
            "‚ö†Ô∏è Limites:\n"
            "‚Ä¢ Frais (cr√©ation, comptabilit√©, assembl√©es)\n"
            "‚Ä¢ Moins adapt√©e au meubl√© r√©gulier (risque IS)\n"
            "‚Ä¢ √Ä l'IS: imp√¥t sur la soci√©t√© + taxation des dividendes, plus-values moins favorables\n\n"
            "üí° En pratique: privil√©gier SCI-IR pour du nu patrimonial. Pour du meubl√© r√©current, envisager LMNP/LMP en nom propre ou SARL de famille.\n"
            "Consultez un expert pour arbitrer IR vs IS selon vos objectifs et horizon de d√©tention."
        )

    def _get_lmnp_vs_lmp_info(self) -> str:
        """Diff√©rences cl√©s entre LMNP et LMP avec structure claire."""
        return (
            "üõãÔ∏è Location meubl√©e: LMNP vs LMP\n\n"
            "1) D√©finitions:\n"
            "‚Ä¢ LMNP (Loueur en Meubl√© Non Professionnel): activit√© meubl√©e √† titre non pro.\n"
            "‚Ä¢ LMP (Loueur en Meubl√© Professionnel): statut pro selon crit√®res.\n\n"
            "2) Conditions du LMP (cumulatives):\n"
            "‚Ä¢ Recettes annuelles meubl√©es > 23 000 ‚Ç¨\n"
            "‚Ä¢ ET sup√©rieures aux autres revenus professionnels du foyer fiscal\n\n"
            "3) R√©gime fiscal (BIC):\n"
            "‚Ä¢ Micro-BIC: abattement forfaitaire (seuil r√©vis√© p√©riodiquement, ex ~77 700 ‚Ç¨; √† v√©rifier chaque ann√©e).\n"
            "‚Ä¢ R√©el: charges r√©elles + amortissements (hors terrain), souvent plus avantageux en meubl√©.\n\n"
            "4) Cotisations sociales:\n"
            "‚Ä¢ LMNP: en g√©n√©ral, pr√©l√®vements sociaux (17,2%) sur le r√©sultat (si imposable).\n"
            "‚Ä¢ LMP: cotisations sociales (SSI) sur le b√©n√©fice, taux globaux significatifs (√† estimer avec un expert).\n\n"
            "5) Plus-values √† la revente:\n"
            "‚Ä¢ LMNP: r√©gime des plus-values des particuliers (abattements dans le temps).\n"
            "‚Ä¢ LMP: plus-values professionnelles (possibles exon√©rations sous conditions: dur√©e d'activit√©, CA, etc.).\n\n"
            "6) Avantages / limites:\n"
            "‚Ä¢ LMNP: simplicit√©, amortissements au r√©el, souvent optimisant l'imp√¥t. Limite: statut non pro.\n"
            "‚Ä¢ LMP: reconnaissance professionnelle et exon√©rations possibles, mais charges sociales et complexit√© accrues.\n\n"
            "7) Quand choisir ?\n"
            "‚Ä¢ Visez LMNP r√©el si vous d√©butez/optimisez l'imp√¥t.\n"
            "‚Ä¢ LMP possible si recettes importantes et strat√©gie long terme; √† valider selon vos revenus pro.\n\n"
            "üí° Conseils: simulez MICRO vs R√âEL (amortissements) et anticipez cotisations/plus-values. Un expert-comptable est vivement recommand√©."
        )
    
    def _get_notary_fees_info(self) -> str:
        """Informations sur les frais de notaire"""
        return """üìã **Frais de notaire et d'acquisition :**

üí∞ **R√©partition des frais :**
‚Ä¢ **Droits de mutation** : ~5,8% (ancien) / ~2,5% (neuf)
‚Ä¢ **Honoraires du notaire** : ~1% (plafonn√©)
‚Ä¢ **Frais et d√©bours** : ~0,5% (hypoth√®que, cadastre...)

üè† **Exemples concrets :**
‚Ä¢ Bien ancien 300k‚Ç¨ ‚Üí ~21-24k‚Ç¨ de frais
‚Ä¢ Bien neuf 300k‚Ç¨ ‚Üí ~10-12k‚Ç¨ de frais

üìä **Calcul rapide :**
‚Ä¢ **Ancien** : Prix √ó 8% (r√®gle approximative)
‚Ä¢ **Neuf** : Prix √ó 3-4%

üí° **Astuces pour √©conomiser :**
‚Ä¢ N√©gocier le prix mobilier s√©par√©ment
‚Ä¢ V√©rifier l'anciennet√© r√©elle du bien
‚Ä¢ Comparer les honoraires entre notaires

‚ö†Ô∏è **Attention :** Ces frais ne sont pas finan√ßables, il faut les avoir en apport personnel !

üîç **Simulateur officiel :** site des notaires de France pour un calcul pr√©cis."""
    
    def _get_insurance_advice(self) -> str:
        """Conseils sur les assurances immobili√®res"""
        return """üõ°Ô∏è **Assurances immobili√®res essentielles :**

üè† **Pour le propri√©taire :**
‚Ä¢ **PNO** (Propri√©taire Non Occupant) : Obligatoire
  - Couvre incendie, d√©g√¢ts des eaux, catastrophes
  - Prix : 200-400‚Ç¨/an selon le bien
  - Prendre en compte dans la rentabilit√©

‚Ä¢ **GLI** (Garantie Loyers Impay√©s) : Recommand√©e
  - Couvre loyers impay√©s + d√©gradations
  - Prix : 2-4% du loyer annuel
  - Alternative aux cautions traditionnelles

üèõÔ∏è **En copropri√©t√© :**
‚Ä¢ Assurance syndic obligatoire (incluse charges)
‚Ä¢ V√©rifier les garanties du contrat d'ensemble
‚Ä¢ Franchise et plafonds importants

üí° **Conseils d'optimisation :**
‚Ä¢ Comparer annuellement (loi Hamon)
‚Ä¢ Grouper avec assurance habitation principale
‚Ä¢ V√©rifier les franchises et exclusions
‚Ä¢ N√©gocier si plusieurs biens

üìû **Assureurs sp√©cialis√©s :** Axa, Maif, Macif, Allianz, GMF

‚ö†Ô∏è **Ne jamais n√©gliger l'assurance** - Les sinistres peuvent co√ªter tr√®s cher !"""
    
    def _get_rental_management_advice(self) -> str:
        """Conseils sur la gestion locative"""
        return """üè† **Guide de la gestion locative :**

üë§ **Gestion par vous-m√™me :**
‚úÖ Avantages : √âconomie (pas de commission), contr√¥le total
‚ùå Inconv√©nients : Temps, stress, connaissances juridiques

üè¢ **Gestion par une agence :**
‚úÖ Avantages : D√©l√©gation compl√®te, expertise juridique
‚ùå Inconv√©nients : Commission 6-10% des loyers

üìã **T√¢ches de gestion :**
‚Ä¢ Recherche et s√©lection des locataires
‚Ä¢ √âtat des lieux d'entr√©e et sortie
‚Ä¢ Encaissement des loyers
‚Ä¢ Gestion des r√©parations et travaux
‚Ä¢ Relations avec les locataires

üìù **Documents essentiels :**
‚Ä¢ Bail de location (type Alur)
‚Ä¢ √âtat des lieux d√©taill√©
‚Ä¢ Dossier locataire complet
‚Ä¢ Quittances de loyer
‚Ä¢ Appels de charges

üí° **Conseils pour bien choisir :**
‚Ä¢ Dossier locataire : 3√óloyer en revenus nets
‚Ä¢ Caution : 1-2 mois de loyer
‚Ä¢ Assurance habitation obligatoire
‚Ä¢ Clause de solidarit√© si couple

‚ö†Ô∏è **Droits et devoirs :** Se former au droit locatif ou d√©l√©guer √† un professionnel."""
    
    def _get_renovation_advice(self) -> str:
        """Conseils sur les travaux et r√©novation"""
        return """üî® **Guide des travaux immobiliers :**

üí∞ **Budget travaux par m¬≤ :**
‚Ä¢ **Rafra√Æchissement** : 200-400‚Ç¨/m¬≤
‚Ä¢ **R√©novation compl√®te** : 800-1200‚Ç¨/m¬≤  
‚Ä¢ **R√©novation lourde** : 1200-2000‚Ç¨/m¬≤

üè† **Priorit√©s par ordre :**
1. **Structure** : Toiture, fondations, murs porteurs
2. **Technique** : √âlectricit√©, plomberie, chauffage
3. **Isolation** : Thermique et phonique
4. **Finitions** : Sol, peinture, cuisine, salle de bain

üìã **Travaux d√©ductibles (revenus fonciers) :**
‚úÖ R√©parations et entretien
‚úÖ Am√©lioration (dans certaines limites)
‚ùå Agrandissement ou construction

üí° **Astuces pour √©conomiser :**
‚Ä¢ Faire plusieurs devis (minimum 3)
‚Ä¢ Grouper les travaux
‚Ä¢ N√©gocier les prix
‚Ä¢ V√©rifier assurances et garanties

üéØ **Travaux rentables en locatif :**
‚Ä¢ Cr√©ation de pi√®ces suppl√©mentaires
‚Ä¢ Am√©lioration √©nerg√©tique (DPE)
‚Ä¢ Modernisation salle de bain/cuisine
‚Ä¢ Isolation phonique

‚ö†Ô∏è **Attention :** Pr√©voir toujours 20% de plus que le devis initial !

üìû **Professionnels :** Architecte, ma√Ætre d'≈ìuvre, artisans certifi√©s RGE."""
    
    def _get_diagnostics_info(self) -> str:
        """Informations sur les diagnostics immobiliers"""
        return """üìã **Diagnostics immobiliers obligatoires :**

üè† **Pour la vente :**
‚Ä¢ **DPE** (Diagnostic Performance √ânerg√©tique) - 10 ans
‚Ä¢ **Amiante** - Illimit√© si n√©gatif, 3 ans si positif  
‚Ä¢ **Plomb** - 1 an (b√¢timents avant 1949)
‚Ä¢ **Termites** - 6 mois (zones √† risque)
‚Ä¢ **Gaz** - 3 ans (installations +15 ans)
‚Ä¢ **√âlectricit√©** - 3 ans (installations +15 ans)
‚Ä¢ **Assainissement** - 3 ans (maisons)

üè† **Pour la location :**
‚Ä¢ **DPE** - Obligatoire
‚Ä¢ **Plomb** - Si avant 1949
‚Ä¢ **Gaz/√âlectricit√©** - Si installations anciennes

üí∞ **Co√ªts moyens :**
‚Ä¢ DPE : 150-300‚Ç¨
‚Ä¢ Pack complet vente : 500-800‚Ç¨
‚Ä¢ Diagnostiqueur certifi√© obligatoire

‚ö†Ô∏è **Nouveau DPE 2021 :**
‚Ä¢ Plus contraignant (seuils F et G)
‚Ä¢ Impact sur la valeur des biens
‚Ä¢ Interdiction location G (2025), F (2028)

üéØ **Cons√©quences des mauvaises notes :**
‚Ä¢ D√©cote importante (10-20%)
‚Ä¢ Difficult√©s de financement
‚Ä¢ Travaux d'am√©lioration n√©cessaires

üí° **Conseil :** Faire r√©aliser les diagnostics avant la mise en vente pour √©viter les mauvaises surprises !"""
    
    def _get_copropriety_advice(self) -> str:
        """Conseils sur la copropri√©t√©"""
        return """üè¢ **Comprendre la copropri√©t√© :**

üìã **Documents essentiels :**
‚Ä¢ **R√®glement de copropri√©t√©** : R√®gles de vie
‚Ä¢ **Carnet d'entretien** : Historique travaux
‚Ä¢ **PV d'AG** (3 derni√®res ann√©es) : D√©cisions prises
‚Ä¢ **Budgets pr√©visionnels** : Charges futures

üí∞ **Types de charges :**
‚Ä¢ **G√©n√©rales** : Ascenseur, m√©nage, chauffage
‚Ä¢ **Sp√©ciales** : Selon les √©quipements  
‚Ä¢ **Travaux** : Provisions pour gros travaux

üîç **Points de vigilance :**
‚Ä¢ √âtat financier du syndic
‚Ä¢ Travaux vot√©s non encore r√©alis√©s
‚Ä¢ Litiges en cours
‚Ä¢ Fonds de travaux disponible

üìä **Charges moyennes :**
‚Ä¢ Immeuble sans ascenseur : 25-35‚Ç¨/m¬≤/an
‚Ä¢ Immeuble avec ascenseur : 35-50‚Ç¨/m¬≤/an
‚Ä¢ R√©sidence avec services : 50-80‚Ç¨/m¬≤/an

‚ö†Ô∏è **Signaux d'alarme :**
‚Ä¢ Charges impay√©es importantes
‚Ä¢ Absence d'entretien visible
‚Ä¢ Nombreux conflits en AG
‚Ä¢ Syndic d√©bord√©

üí° **Astuces :**
‚Ä¢ Assister √† une AG avant achat
‚Ä¢ Rencontrer le syndic et concierge
‚Ä¢ V√©rifier l'√©tat des parties communes
‚Ä¢ Calculer l'impact charges sur rentabilit√©

üéØ **Pour l'investissement :** Les charges impactent directement la rentabilit√© !"""
    
    def _get_rentability_advice(self, property_data: Optional[Dict]) -> str:
        """Conseils sur la rentabilit√©"""
        base_advice = """üè† **Conseils sur la rentabilit√© immobili√®re :**

üìä **Indicateurs cl√©s :**
‚Ä¢ **Rentabilit√© brute** : (Loyers annuels / Prix d'achat) √ó 100
‚Ä¢ **Rentabilit√© nette** : (Loyers - charges) / Prix d'achat √ó 100
‚Ä¢ **Cash-flow** : Revenus - (charges + mensualit√©s pr√™t)

‚úÖ **Bonnes rentabilit√©s selon le march√© :**
‚Ä¢ Grande ville : 3-5% net
‚Ä¢ Ville moyenne : 4-6% net  
‚Ä¢ Petite ville : 5-8% net

‚ö†Ô∏è **Attention :** Une rentabilit√© tr√®s √©lev√©e (>8%) peut cacher des risques (mauvais quartier, vacance locative √©lev√©e, travaux importants)."""
        
        if property_data and property_data.get('city'):
            city_advice = f"\n\nüîç Pour votre bien √† {property_data['city']}, je recommande de viser une rentabilit√© nette d'au moins 4-5%."
            base_advice += city_advice
        
        return base_advice
    
    def _get_cashflow_advice(self, property_data: Optional[Dict]) -> str:
        """Conseils sur le cash-flow"""
        return """üí∞ **Comprendre le cash-flow immobilier :**

üìà **Cash-flow positif :**
‚Ä¢ Revenus locatifs > toutes les charges
‚Ä¢ Permet de d√©gager des revenus mensuels
‚Ä¢ Id√©al pour l'investissement locatif

üìâ **Cash-flow n√©gatif :**
‚Ä¢ Vous devez compl√©ter chaque mois
‚Ä¢ Acceptable si l'objectif est la plus-value √† long terme
‚Ä¢ Attention √† votre capacit√© financi√®re

üéØ **Optimisation :**
‚Ä¢ N√©gocier le prix d'achat
‚Ä¢ Augmenter les loyers (dans la limite l√©gale)
‚Ä¢ R√©duire les charges (syndic, assurance)
‚Ä¢ D√©fiscalisation (LMNP, Pinel, etc.)

üí° Un cash-flow l√©g√®rement n√©gatif (-50‚Ç¨/mois) peut √™tre acceptable si la plus-value est importante."""
    
    def _get_price_advice(self, property_data: Optional[Dict]) -> str:
        """Conseils sur les prix"""
        advice = """üí∂ **Analyse des prix immobiliers :**

üîç **Comment √©valuer un prix :**
‚Ä¢ Comparer avec les ventes r√©centes du quartier
‚Ä¢ Utiliser le prix au m¬≤ comme r√©f√©rence
‚Ä¢ Consid√©rer l'√©tat du bien et les travaux n√©cessaires
‚Ä¢ Analyser l'√©volution du march√© local

üìä **Sources de donn√©es :**
‚Ä¢ DVF (Demandes de Valeurs Fonci√®res) - gratuit
‚Ä¢ Sites d'estimation (SeLoger, MeilleursAgents)
‚Ä¢ Notaires et agents immobiliers locaux

üí° **N√©gociation :**
‚Ä¢ Une d√©cote de 5-10% est souvent possible
‚Ä¢ Arguments : travaux, march√©, d√©lais
‚Ä¢ Rester respectueux et r√©aliste"""
        
        if property_data:
            price = property_data.get('price', 0)
            surface = property_data.get('surface', 0)
            if price and surface:
                price_per_sqm = price / surface
                advice += f"\n\nüè† Votre bien : {price_per_sqm:,.0f}‚Ç¨/m¬≤"
                advice += "\nJe vais comparer ce prix avec le march√© local pour vous donner mon analyse."
        
        return advice
    
    def _get_investment_advice(self) -> str:
        """Conseils g√©n√©raux sur l'investissement"""
        return """üè† **Guide de l'investissement immobilier :**

üéØ **D√©finir ses objectifs :**
‚Ä¢ Revenus compl√©mentaires (locatif)
‚Ä¢ Constitution d'un patrimoine
‚Ä¢ Pr√©paration de la retraite
‚Ä¢ R√©duction d'imp√¥ts

üìã **√âtapes cl√©s :**
1. **Budget** : Apport + capacit√© d'emprunt
2. **Zone** : Demande locative, prix, √©volution
3. **Type de bien** : Studio, T2, maison...
4. **Financement** : Taux, dur√©e, assurance
5. **Gestion** : Vous-m√™me ou via une agence

‚úÖ **R√®gles d'or :**
‚Ä¢ Emplacement, emplacement, emplacement !
‚Ä¢ Diversifier si possible (plusieurs biens)
‚Ä¢ Pr√©voir une r√©serve pour les impr√©vus
‚Ä¢ Se former continuellement

‚ö†Ô∏è **Risques :** Vacance locative, travaux impr√©vus, √©volution du march√©, changements fiscaux."""
    
    def _get_tax_advice(self) -> str:
        """Conseils fiscaux"""
        return """üìã **Fiscalit√© de l'investissement immobilier :**

üèõÔ∏è **R√©gimes fiscaux :**
‚Ä¢ **Revenus fonciers** (d√©ficit foncier possible)
‚Ä¢ **LMNP** (Location Meubl√©e Non Professionnelle)
‚Ä¢ **LMP** (Location Meubl√©e Professionnelle)

üè¢ **SCI (Soci√©t√© Civile Immobili√®re) :**
‚úÖ Avantages : Gestion familiale, transmission facilit√©e
‚ùå Inconv√©nients : Comptabilit√©, pas de d√©ficit foncier

üí° **Dispositifs d'aide :**
‚Ä¢ **Pinel** : R√©duction d'imp√¥t (zones √©ligibles)
‚Ä¢ **Denormandie** : R√©novation dans l'ancien
‚Ä¢ **Malraux** : Monuments historiques

‚ö†Ô∏è **Important :** La fiscalit√© change r√©guli√®rement. Consultez imp√©rativement un expert-comptable ou conseiller en gestion de patrimoine pour optimiser votre situation."""
    
    def _get_financing_advice(self) -> str:
        """Conseils sur le financement"""
        return """üí≥ **Financement de votre investissement :**

üè¶ **Capacit√© d'emprunt :**
‚Ä¢ Taux d'endettement max : 35% (revenus nets)
‚Ä¢ Reste √† vivre suffisant
‚Ä¢ Stabilit√© professionnelle
‚Ä¢ Apport recommand√© : 10-20% minimum

üìä **N√©gociation du pr√™t :**
‚Ä¢ Comparer plusieurs banques
‚Ä¢ Utiliser un courtier si n√©cessaire
‚Ä¢ N√©gocier le taux, l'assurance, les frais
‚Ä¢ Consid√©rer la modularit√© (report d'√©ch√©ances)

üí∞ **Types de pr√™ts :**
‚Ä¢ **Pr√™t amortissable** : Le plus courant
‚Ä¢ **Pr√™t in fine** : Remboursement du capital √† la fin
‚Ä¢ **Pr√™t relais** : Pour financer avant une vente

üéØ **Strat√©gies :**
‚Ä¢ Effet de levier : Emprunter pour d√©multiplier
‚Ä¢ Lissage fiscal avec les int√©r√™ts d'emprunt
‚Ä¢ Assurance emprunteur : n√©gociable et r√©siliable

üìû Pensez √† faire jouer la concurrence entre les banques !"""
    
    def _get_general_response(self) -> str:
        """R√©ponse g√©n√©rale"""
        return """üëã Je suis Rendimo, votre assistant IA sp√©cialis√© en investissement immobilier !

üîç **Ce que je peux vous aider √† faire :**
‚Ä¢ Analyser la rentabilit√© d'un bien immobilier
‚Ä¢ Comparer les prix avec le march√© local
‚Ä¢ Vous conseiller sur le financement
‚Ä¢ Expliquer la fiscalit√© immobili√®re
‚Ä¢ Calculer cash-flow et ROI

üè† **Pour commencer :**
Collez l'URL d'une annonce LeBonCoin que vous souhaitez analyser, ou posez-moi directement vos questions sur l'immobilier !

üí° **Domaines d'expertise :**
‚Ä¢ Investissement locatif
‚Ä¢ Achat r√©sidence principale  
‚Ä¢ SCI et optimisation fiscale
‚Ä¢ Strat√©gies d'investissement

N'h√©sitez pas √† me poser vos questions ! üòä"""
    
    def _get_error_response(self) -> str:
        """R√©ponse en cas d'erreur"""
        return """üòÖ D√©sol√©, je rencontre un petit probl√®me technique pour vous r√©pondre.

üîÑ **Vous pouvez essayer de :**
‚Ä¢ Reformuler votre question
‚Ä¢ V√©rifier votre connexion internet
‚Ä¢ R√©essayer dans quelques instants

üí° En attendant, n'h√©sitez pas √† explorer les autres fonctionnalit√©s de l'application !

Si le probl√®me persiste, cela peut √™tre li√© √† la configuration des APIs (Groq/OpenAI). V√©rifiez vos cl√©s API dans le fichier `.env`."""
    
    def start_questionnaire(self, property_data: Dict) -> str:
        """
        D√©marre le questionnaire d'analyse financi√®re
        
        Args:
            property_data: Donn√©es du bien
            
        Returns:
            str: Premier message du questionnaire
        """
        self.conversation_state['questionnaire_active'] = True
        self.conversation_state['current_question'] = 'investment_type'
        self.conversation_state['collected_answers'] = {}
        
        return f"""üè† **Parfait ! J'ai analys√© le bien √† {property_data.get('city', 'N/A')}.**

Pour calculer la rentabilit√© pr√©cise, j'ai besoin de quelques informations :

**1Ô∏è‚É£ Type d'investissement :**
‚Ä¢ üè† Achat pour habiter (r√©sidence principale)
‚Ä¢ üí∞ Investissement locatif (mise en location)
‚Ä¢ üìà Achat-revente (plus-value √† court terme)

Quel est votre projet avec ce bien ?"""
    
    def process_questionnaire_answer(self, answer: str) -> str:
        """
        Traite une r√©ponse du questionnaire
        
        Args:
            answer: R√©ponse de l'utilisateur
            
        Returns:
            str: Question suivante ou fin du questionnaire
        """
        current_q = self.conversation_state.get('current_question')
        
        if current_q == 'investment_type':
            # Traitement de la r√©ponse sur le type d'investissement
            answer_lower = answer.lower()
            if 'locatif' in answer_lower or 'investissement' in answer_lower:
                self.conversation_state['collected_answers']['investment_type'] = 'rental'
                self.conversation_state['current_question'] = 'monthly_rent'
                return """‚úÖ **Investissement locatif** - Excellent choix !

**2Ô∏è‚É£ Loyer mensuel estim√© :**
üí∞ √Ä combien estimez-vous pouvoir louer ce bien par mois ? (en euros)

üí° *Astuce : Consultez les annonces similaires sur LeBonCoin, SeLoger ou PAP pour estimer le loyer de march√©.*"""
            
            elif 'personnel' in answer_lower or 'habiter' in answer_lower:
                self.conversation_state['collected_answers']['investment_type'] = 'personal'
                return self._finish_personal_analysis()
            
            elif 'revente' in answer_lower or 'plus-value' in answer_lower:
                self.conversation_state['collected_answers']['investment_type'] = 'flip'
                return self._finish_flip_analysis()
        
        elif current_q == 'monthly_rent':
            # Traitement du loyer mensuel
            try:
                rent = float(answer.replace('‚Ç¨', '').replace(' ', '').replace(',', '.'))
                self.conversation_state['collected_answers']['monthly_rent'] = rent
                self.conversation_state['current_question'] = 'annual_charges'
                return f"""‚úÖ **Loyer : {rent:.0f}‚Ç¨/mois**

**3Ô∏è‚É£ Charges annuelles :**
üè¢ Quel est le montant des charges de copropri√©t√© par an ? (en euros)

üí° *Cette information se trouve g√©n√©ralement dans l'annonce ou vous pouvez demander au vendeur/agent.*"""
            except ValueError:
                return "‚ùå Merci de saisir un montant en euros (ex: 850 ou 850‚Ç¨)"
        
        elif current_q == 'annual_charges':
            # Traitement des charges
            try:
                charges = float(answer.replace('‚Ç¨', '').replace(' ', '').replace(',', '.'))
                self.conversation_state['collected_answers']['annual_charges'] = charges
                self.conversation_state['current_question'] = 'ownership_type'
                return f"""‚úÖ **Charges : {charges:.0f}‚Ç¨/an**

**4Ô∏è‚É£ Mode de propri√©t√© :**
üìã Comment comptez-vous acheter ?
‚Ä¢ üë§ En nom propre (personne physique)
‚Ä¢ üèõÔ∏è Via une SCI (Soci√©t√© Civile Immobili√®re)
‚Ä¢ üë• En indivision (avec d'autres personnes)"""
            except ValueError:
                return "‚ùå Merci de saisir un montant en euros (ex: 1200 ou 1200‚Ç¨)"
        
        elif current_q == 'ownership_type':
            # Finalisation du questionnaire
            answer_lower = answer.lower()
            if 'sci' in answer_lower:
                self.conversation_state['collected_answers']['ownership_type'] = 'sci'
            elif 'indivision' in answer_lower:
                self.conversation_state['collected_answers']['ownership_type'] = 'joint'
            else:
                self.conversation_state['collected_answers']['ownership_type'] = 'personal'
            
            return self._finish_rental_analysis()
        
        return "‚ùì Je n'ai pas bien compris votre r√©ponse. Pouvez-vous la reformuler ?"
    
    def _finish_rental_analysis(self) -> str:
        """Finalise l'analyse pour un investissement locatif"""
        answers = self.conversation_state['collected_answers']
        
        return f"""‚úÖ **Analyse termin√©e !**

üìä **R√©capitulatif de vos r√©ponses :**
‚Ä¢ Type : Investissement locatif
‚Ä¢ Loyer mensuel : {answers.get('monthly_rent', 0):.0f}‚Ç¨
‚Ä¢ Charges annuelles : {answers.get('annual_charges', 0):.0f}‚Ç¨  
‚Ä¢ Propri√©t√© : {answers.get('ownership_type', 'nom propre')}

üîÑ **Calcul en cours...**
Je vais maintenant calculer la rentabilit√© brute, nette, le cash-flow et le ROI. 

Les r√©sultats appara√Ætront dans la section "Analyse du bien" √† droite de votre √©cran.

üí° **Prochaines √©tapes :**
‚Ä¢ Consultez le tableau d'analyse d√©taill√©e
‚Ä¢ T√©l√©chargez le rapport Excel complet
‚Ä¢ Comparez avec le march√© local

Des questions sur les r√©sultats ? N'h√©sitez pas √† me demander ! üòä"""
    
    def _finish_personal_analysis(self) -> str:
        """Finalise l'analyse pour un achat personnel"""
        return """üè† **Achat r√©sidence principale**

Pour un achat personnel, les crit√®res d'analyse sont diff√©rents :

üìç **Points cl√©s √† v√©rifier :**
‚Ä¢ Emplacement et commodit√©s (transports, commerces, √©coles)
‚Ä¢ √âtat du bien et travaux n√©cessaires  
‚Ä¢ √âvolution du quartier
‚Ä¢ Capacit√© de financement
‚Ä¢ Co√ªt total (notaire, travaux, d√©m√©nagement)

üí∞ **Conseils financiers :**
‚Ä¢ Pr√©voir 8-10% de frais d'acquisition
‚Ä¢ Garder une √©pargne de pr√©caution
‚Ä¢ N√©gocier le taux d'emprunt
‚Ä¢ V√©rifier l'√©ligibilit√© aux aides (PTZ, etc.)

üîç Je vais tout de m√™me analyser le prix au m¬≤ par rapport au march√© local pour vous donner une id√©e de la valorisation du bien."""
    
    def _finish_flip_analysis(self) -> str:
        """Finalise l'analyse pour un achat-revente"""
        return """üìà **Achat-revente (investissement court terme)**

‚ö†Ô∏è **Attention : Investissement √† haut risque !**

üí° **Facteurs de r√©ussite :**
‚Ä¢ Bien sous-√©valu√© ou √† r√©nover
‚Ä¢ March√© porteur (demande > offre)
‚Ä¢ Travaux ma√Ætris√©s (co√ªt et d√©lais)
‚Ä¢ Fiscalit√© des plus-values immobili√®res
‚Ä¢ Frais de transaction importants (achat + vente)

üìä **Calculs n√©cessaires :**
‚Ä¢ Prix d'achat + frais + travaux
‚Ä¢ Prix de revente estim√©
‚Ä¢ D√©lai de revente
‚Ä¢ Fiscalit√© (plus-value = revenus si < 5 ans)

üèóÔ∏è **Types de biens favorables :**
‚Ä¢ Appartements √† r√©nover en centre-ville
‚Ä¢ Maisons avec potentiel d'extension
‚Ä¢ Biens atypiques sous-√©valu√©s

üíº **Je recommande fortement de consulter un professionnel pour ce type d'investissement.**"""

# Fonction utilitaire pour tester le module
def test_ai_assistant():
    """Fonction de test pour l'assistant IA"""
    assistant = AIAssistant()
    
    print("Test de l'assistant IA Rendimo...")
    
    # Test de r√©ponse simple
    response = assistant.get_response("Qu'est-ce que la rentabilit√© immobili√®re ?", [])
    print(f"R√©ponse: {response[:200]}...")
    
    # Test avec donn√©es de bien
    property_data = {
        'city': 'Lyon',
        'price': 250000,
        'surface': 60,
        'property_type': 'Appartement'
    }
    
    response = assistant.get_response("Ce bien est-il rentable ?", [], property_data)
    print(f"\nR√©ponse avec contexte: {response[:200]}...")

if __name__ == "__main__":
    test_ai_assistant()