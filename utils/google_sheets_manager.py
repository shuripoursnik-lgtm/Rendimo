"""
Module de gestion Google Sheets pour Rendimo
Remplace la gestion Excel par Google Sheets API
"""

import gspread
import streamlit as st
import time
import tempfile
import os
import requests
from pathlib import Path
from datetime import datetime
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment
import pandas as pd

from config.google_sheets_config import (
    GOOGLE_SHEET_ID, 
    GOOGLE_SHEET_NAME,
    SHEETS_MAPPING,
    CELL_MAPPING,
    GOOGLE_SCOPES
)

class GoogleSheetsManager:
    """Gestionnaire pour les op√©rations Google Sheets"""
    
    def __init__(self):
        self.gc = None
        self.sheet = None
        self.backup_data = {}  # Sauvegarde des donn√©es modifi√©es
    
    @staticmethod
    def parse_french_number(value_str):
        """
        Parse un nombre au format fran√ßais avec espaces ins√©cables, virgules et pourcentages.
        
        Exemples:
        - "7 286,19 ‚Ç¨" ‚Üí 7286.19
        - "2 691,00 ‚Ç¨" ‚Üí 2691.0
        - "5,25%" ‚Üí 5.25
        - "120,00 ‚Ç¨" ‚Üí 120.0
        """
        if not value_str:
            return 0.0
            
        try:
            # Convertir en string si ce n'est pas d√©j√† le cas
            clean_value = str(value_str)
            
            # V√©rifier si c'est un pourcentage
            is_percentage = clean_value.strip().endswith('%')
            
            # Enlever le symbole ‚Ç¨ et %
            clean_value = clean_value.replace('‚Ç¨', '').replace('%', '').strip()
            
            # Enlever TOUS les types d'espaces possibles
            spaces_to_remove = [
                ' ',        # Espace normal
                '\u00A0',   # Espace ins√©cable (non-breaking space)
                '\u202F',   # Espace ins√©cable √©troit (narrow no-break space)
                '\u2009',   # Espace fine (thin space)
                '\u2008',   # Espace ponctuation (punctuation space)
                '\u200A',   # Espace ultra-fine (hair space)
            ]
            
            for space in spaces_to_remove:
                clean_value = clean_value.replace(space, '')
            
            # Remplacer la virgule fran√ßaise par un point d√©cimal
            clean_value = clean_value.replace(',', '.')
            
            # Convertir en float
            result = float(clean_value)
            
            # Les pourcentages sont d√©j√† au bon format dans les sheets (ex: 5.25 pour 5.25%)
            return result
            
        except (ValueError, TypeError):
            return 0.0
        
    def connect(self):
        """Connexion √† Google Sheets avec service account"""
        try:
            st.info("üìã Connexion √† Google Sheets...")
            
            # Chemin vers le fichier de credentials
            credentials_path = Path("config/google_sheets_credentials.json")
            
            if not credentials_path.exists():
                st.error("‚ùå Fichier de credentials Google Sheets non trouv√©")
                st.info("ÔøΩ Veuillez suivre les instructions dans config/README_Google_Sheets_Setup.md")
                return False
            
            # Connexion avec le service account
            self.gc = gspread.service_account(filename=str(credentials_path))
            self.sheet = self.gc.open_by_key(GOOGLE_SHEET_ID)
            
            return True
            
        except FileNotFoundError:
            st.error("‚ùå Fichier de credentials non trouv√©")
            st.info("üí° Veuillez configurer les credentials Google Sheets (voir config/README_Google_Sheets_Setup.md)")
            return False
        except gspread.SpreadsheetNotFound:
            st.error("‚ùå Google Sheet non trouv√© ou acc√®s refus√©")
            st.info("üí° V√©rifiez que le service account a acc√®s au Google Sheet")
            return False
        except Exception as e:
            st.error(f"‚ùå Erreur connexion Google Sheets : {str(e)}")
            st.info("üí° V√©rifiez que le service account a acc√®s au fichier Google Sheets")
            return False
    
    def update_property_data(self, property_data, additional_data):
        """Met √† jour les donn√©es du bien dans Google Sheets"""
        try:
            if not self.sheet:
                st.error("‚ùå Pas de connexion Google Sheets")
                return False
            
            # ============================================================================
            # FEUILLE "FRAIS DE NOTAIRE"
            # ============================================================================
            try:
                frais_sheet = self.sheet.worksheet(SHEETS_MAPPING["frais_notaire"])
                
                # Prix du bien (I3) - S'assurer que c'est un nombre
                prix = property_data.get('price', 0)
                if prix:
                    frais_sheet.update('I3', [[prix]])  # Format liste de listes
                
                # Type de bien (F3) - S'assurer que c'est du texte
                type_bien = str(additional_data.get('type_bien', 'Occasion'))
                frais_sheet.update('F3', [[type_bien]])  # Format liste de listes
                
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erreur feuille 'Frais de notaire': {str(e)}")
            
            # ============================================================================
            # FEUILLE "CO√õTS ET RENDEMENT"
            # ============================================================================
            try:
                cout_sheet = self.sheet.worksheet(SHEETS_MAPPING["cout_rendement"])
                
                # Pr√©parer les donn√©es avec format correct
                updates = [
                    ('D7', float(additional_data.get('loyer_hc', 0))),
                    ('D8', float(additional_data.get('loyer_cc', 0))),
                    ('D9', float(property_data.get('surface', 0))),
                    ('D14', str(additional_data.get('utilise_pret', 'Oui'))),
                    ('D15', float(additional_data.get('duree_pret', 20))),
                    ('D16', float(additional_data.get('apport', 0))),
                    ('D17', float(additional_data.get('taux_pret', 4.0)) / 100),  # Conversion en d√©cimal
                    ('D21', float(additional_data.get('cout_renovation', 0))),
                    ('D22', float(additional_data.get('cout_construction', 0)))
                ]
                
                # Mise √† jour une par une avec format correct
                for cell, value in updates:
                    try:
                        cout_sheet.update(cell, [[value]])  # Format liste de listes
                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è Erreur mise √† jour {cell}: {str(e)}")
                
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erreur feuille 'Co√ªts et rendement': {str(e)}")
            
            # ============================================================================
            # FEUILLES FISCALES (NOM PROPRE / SCI)
            # ============================================================================
            donnees_fiscales = additional_data.get('donnees_fiscales', {})
            
            if donnees_fiscales.get('type') == 'nom_propre':
                self._update_nom_propre_sheet(donnees_fiscales)
            elif donnees_fiscales.get('type') == 'sci':
                self._update_sci_sheet(donnees_fiscales)
            
            # ============================================================================
            # PLUS VALUE
            # ============================================================================
            try:
                plus_value_sheet = self.sheet.worksheet(SHEETS_MAPPING["plus_value"])
                estimation = float(additional_data.get('estimation_revente', 0))
                plus_value_sheet.update('E7', [[estimation]])  # Format liste de listes
                
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erreur feuille 'Plus value': {str(e)}")
            
            # Attendre que Google Sheets recalcule
            time.sleep(2)  # Attendre pour le recalcul
            
            return True
            
        except Exception as e:
            st.error(f"‚ùå Erreur connexion Google Sheets : {str(e)}")
            return False

    # M√©thodes supprim√©es pour simplification : 
    # - create_temporary_copy() 
    # - delete_temporary_copy()
    # - schedule_auto_restore()
    # On modifie directement le template et on t√©l√©charge
    
    def _update_nom_propre_sheet(self, donnees_fiscales):
        """Met √† jour la feuille Nom propre"""
        try:
            nom_propre_sheet = self.sheet.worksheet(SHEETS_MAPPING["nom_propre"])
            
            updates = [
                ('D6', float(donnees_fiscales.get('revenu_net', 0))),           # Revenu net global
                ('D7', str(donnees_fiscales.get('situation', 'C√©libataire-divorc√©-veuf'))),    # Situation familiale
                ('D8', float(donnees_fiscales.get('nombre_enfants', 0)))       # Nombre d'enfants
            ]
            
            for cell, value in updates:
                try:
                    nom_propre_sheet.update(cell, [[value]])
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Erreur mise √† jour {cell}: {str(e)}")
                
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Erreur feuille 'Nom propre': {str(e)}")
    
    def _update_sci_sheet(self, donnees_fiscales):
        """Met √† jour la feuille SCI"""
        try:
            sci_sheet = self.sheet.worksheet(SHEETS_MAPPING["sci"])
            
            # Capital SCI
            capital = float(donnees_fiscales.get('capital', 1000))
            sci_sheet.update('D6', [[capital]])
            
            # Donn√©es des associ√©s (colonnes D, E, F, G)
            associes = donnees_fiscales.get('associes', [])
            colonnes = ['D', 'E', 'F', 'G']
            
            for i, associe in enumerate(associes[:4]):  # Maximum 4 associ√©s
                if i < len(colonnes):
                    col = colonnes[i]
                    try:
                        # Part (ligne 8) - conversion en d√©cimal
                        part_decimal = float(associe.get('part', 0)) / 100
                        sci_sheet.update(f'{col}8', [[part_decimal]])
                        
                        # Situation (ligne 9) 
                        situation = str(associe.get('situation', 'C√©libataire-divorc√©-veuf'))
                        sci_sheet.update(f'{col}9', [[situation]])
                        
                        # Revenu (ligne 10)
                        revenu = float(associe.get('revenu', 0))
                        sci_sheet.update(f'{col}10', [[revenu]])
                        
                        # Situation familiale d√©taill√©e (ligne 11) - m√™me que ligne 9
                        sci_sheet.update(f'{col}11', [[situation]])
                        
                        # Nombre d'enfants (ligne 12) - sp√©cifique √† chaque associ√©
                        enfants = float(associe.get('enfants', 0))
                        sci_sheet.update(f'{col}12', [[enfants]])
                        
                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è Erreur associ√© {i+1}: {str(e)}")
            
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Erreur feuille 'SCI': {str(e)}")
    
    def get_charges_data(self):
        """R√©cup√®re les donn√©es des charges pour les indicateurs"""
        try:
            if not self.sheet:
                return None
                
            cout_sheet = self.sheet.worksheet(SHEETS_MAPPING["cout_rendement"])
            
            # R√©cup√©rer les libell√©s et valeurs (F18:G27)
            charges_range = cout_sheet.get('F18:G27')
            charges_data = []
            
            for i, row in enumerate(charges_range):
                if len(row) >= 2:  # S'assurer qu'il y a au moins 2 colonnes
                    label = row[0] if len(row) > 0 else ""
                    value = row[1] if len(row) > 1 else ""
                    
                    # Nettoyer et valider
                    if label and str(label).strip():
                        try:
                            # Utiliser la fonction de parsing fran√ßais
                            value_float = self.parse_french_number(value)
                            
                            if value_float > 0:
                                charges_data.append({
                                    'libelle': str(label).strip(),
                                    'valeur': value_float
                                })
                                
                        except Exception:
                            continue
            
            return charges_data
            
        except Exception as e:
            st.error(f"‚ùå Erreur r√©cup√©ration charges : {str(e)}")
            return None

    def get_fiscalite_data(self, type_regime):
        """R√©cup√®re les donn√©es fiscales selon le r√©gime (nom_propre ou sci)"""
        try:
            if not self.sheet:
                return None
                
            if type_regime == "nom_propre":
                return self._get_nom_propre_fiscalite_data()
            elif type_regime == "sci":
                return self._get_sci_fiscalite_data()
            else:
                return None
                
        except Exception as e:
            st.error(f"‚ùå Erreur r√©cup√©ration donn√©es fiscales : {str(e)}")
            return None
    
    def _get_nom_propre_fiscalite_data(self):
        """R√©cup√®re les donn√©es fiscales Nom propre"""
        try:
            nom_propre_sheet = self.sheet.worksheet(SHEETS_MAPPING["nom_propre"])
            
            # Rentabilit√© brut/net de charges (F122:G123)
            rentabilite_range = nom_propre_sheet.get('F122:G123')
            rentabilite_data = []
            
            if len(rentabilite_range) >= 2:
                for i, row in enumerate(rentabilite_range):
                    if len(row) >= 2:
                        label = str(row[0]).strip() if row[0] else f"Ligne {i+1}"
                        value = self.parse_french_number(row[1]) if row[1] else 0
                        if value != 0:
                            rentabilite_data.append({'libelle': label, 'valeur': value})
            
            # Rentabilit√© nette avec imp√¥ts (F124:G127)
            rentabilite_nette_range = nom_propre_sheet.get('F124:G127')
            rentabilite_nette_data = []
            
            for i, row in enumerate(rentabilite_nette_range):
                if len(row) >= 2:
                    label = str(row[0]).strip() if row[0] else f"Ligne {i+1}"
                    value = self.parse_french_number(row[1]) if row[1] else 0
                    if value != 0:
                        rentabilite_nette_data.append({'libelle': label, 'valeur': value})
            
            # Cash mensuel (D130:G131) - libell√©s en premi√®re ligne
            cash_range = nom_propre_sheet.get('D130:G131')
            cash_data = []
            
            if len(cash_range) >= 2:
                labels = cash_range[0]  # Premi√®re ligne = libell√©s
                values = cash_range[1]  # Deuxi√®me ligne = valeurs
                
                for i, (label, value) in enumerate(zip(labels, values)):
                    if label and value:
                        parsed_value = self.parse_french_number(value)
                        if parsed_value != 0:
                            cash_data.append({'libelle': str(label).strip(), 'valeur': parsed_value})
            
            return {
                'rentabilite': rentabilite_data,
                'rentabilite_nette': rentabilite_nette_data,
                'cash_mensuel': cash_data
            }
            
        except Exception as e:
            st.error(f"‚ùå Erreur donn√©es Nom propre : {str(e)}")
            return None
    
    def _get_sci_fiscalite_data(self):
        """R√©cup√®re les donn√©es fiscales SCI"""
        try:
            sci_sheet = self.sheet.worksheet(SHEETS_MAPPING["sci"])
            
            # Pourcentage de dividendes distribu√©s (D59)
            dividendes_cell = sci_sheet.get('D59')
            dividendes_pct = 0
            if dividendes_cell and len(dividendes_cell) > 0 and len(dividendes_cell[0]) > 0:
                dividendes_pct = self.parse_french_number(dividendes_cell[0][0])
            
            # Cash mensuel par associ√© (C98:G100)
            cash_range = sci_sheet.get('C98:G100')
            cash_data = []
            
            if len(cash_range) >= 3:
                associes_row = cash_range[0]  # Premi√®re ligne = noms associ√©s
                ir_row = cash_range[1]        # Deuxi√®me ligne = SCI √† l'IR
                is_row = cash_range[2]        # Troisi√®me ligne = SCI √† l'IS
                
                # Ignorer la premi√®re colonne (libell√©s)
                for i in range(1, len(associes_row)):
                    if i < len(ir_row) and i < len(is_row):
                        associe_nom = str(associes_row[i]).strip() if associes_row[i] else f"Associ√© {i}"
                        ir_value = self.parse_french_number(ir_row[i]) if ir_row[i] else 0
                        is_value = self.parse_french_number(is_row[i]) if is_row[i] else 0
                        
                        if ir_value != 0 or is_value != 0:
                            cash_data.append({
                                'associe': associe_nom,
                                'ir': ir_value,
                                'is': is_value
                            })
            
            return {
                'cash_associes': cash_data,
                'dividendes_pct': dividendes_pct
            }
            
        except Exception as e:
            st.error(f"‚ùå Erreur donn√©es SCI : {str(e)}")
            return None

    def get_plus_value_data(self):
        """R√©cup√®re les donn√©es de plus-value selon la dur√©e de d√©tention"""
        try:
            if not self.sheet:
                return None
                
            plus_value_sheet = self.sheet.worksheet(SHEETS_MAPPING["plus_value"])
            
            # Dur√©e de d√©tention LIBELL√âS (F25:AL25) - ne pas parser en nombre !
            duree_range = plus_value_sheet.get('F25:AL25')
            # Plus-value apr√®s imposition (F36:AL36)
            apres_imposition_range = plus_value_sheet.get('F36:AL36')
            # Plus-value avant imposition (F37:AL37)
            avant_imposition_range = plus_value_sheet.get('F37:AL37')
            
            plus_value_data = []
            
            if duree_range and apres_imposition_range and avant_imposition_range:
                durees = duree_range[0] if duree_range else []
                apres_values = apres_imposition_range[0] if apres_imposition_range else []
                avant_values = avant_imposition_range[0] if avant_imposition_range else []
                
                for i, duree in enumerate(durees):
                    if duree and i < len(apres_values) and i < len(avant_values):
                        try:
                            # Garder la dur√©e comme libell√© ("+1 ans", "+2 ans", etc.)
                            duree_label = str(duree).strip()
                            apres_val = self.parse_french_number(apres_values[i]) if apres_values[i] else 0
                            avant_val = self.parse_french_number(avant_values[i]) if avant_values[i] else 0
                            
                            # Ne garder que si au moins une valeur n'est pas z√©ro et que le libell√© n'est pas vide
                            if duree_label and (apres_val != 0 or avant_val != 0):
                                plus_value_data.append({
                                    'duree': duree_label,  # Libell√© au lieu de nombre
                                    'apres_imposition': apres_val,
                                    'avant_imposition': avant_val
                                })
                        except Exception:
                            continue
            
            return plus_value_data
            
        except Exception as e:
            st.error(f"‚ùå Erreur donn√©es plus-value : {str(e)}")
            return None

    def get_amortissement_data(self):
        """R√©cup√®re les donn√©es d'amortissement"""
        try:
            if not self.sheet:
                return None
                
            amortissement_sheet = self.sheet.worksheet(SHEETS_MAPPING["amortissement"])
            
            # Co√ªt total du cr√©dit (K8)
            cout_total_cell = amortissement_sheet.get('K8')
            cout_total = 0
            if cout_total_cell and len(cout_total_cell) > 0 and len(cout_total_cell[0]) > 0:
                cout_total = self.parse_french_number(cout_total_cell[0][0])
            
            # Mensualit√© hors assurance (E13) et avec assurance (F13)
            mensualite_range = amortissement_sheet.get('E13:F13')
            mensualite_hors = 0
            mensualite_avec = 0
            if mensualite_range and len(mensualite_range) > 0:
                if len(mensualite_range[0]) > 0:
                    mensualite_hors = self.parse_french_number(mensualite_range[0][0])
                if len(mensualite_range[0]) > 1:
                    mensualite_avec = self.parse_french_number(mensualite_range[0][1])
            
            # Donn√©es tableau amortissement (C13:C253, G13:G253, H13:H253)
            # Limiter √† 120 mois pour √©viter trop de donn√©es
            mois_range = amortissement_sheet.get('C13:C133')  # 10 ans max
            interets_range = amortissement_sheet.get('G13:G133')
            capital_range = amortissement_sheet.get('H13:H133')
            
            amortissement_data = []
            
            if mois_range and interets_range and capital_range:
                for i in range(min(len(mois_range), len(interets_range), len(capital_range))):
                    if (mois_range[i] and len(mois_range[i]) > 0 and 
                        interets_range[i] and len(interets_range[i]) > 0 and
                        capital_range[i] and len(capital_range[i]) > 0):
                        
                        try:
                            mois = str(mois_range[i][0]).strip()
                            interets = self.parse_french_number(interets_range[i][0])
                            capital = self.parse_french_number(capital_range[i][0])
                            
                            if mois and (interets != 0 or capital != 0):
                                amortissement_data.append({
                                    'mois': mois,
                                    'interets': interets,
                                    'capital': capital
                                })
                        except Exception:
                            continue
            
            return {
                'cout_total': cout_total,
                'mensualite_hors_assurance': mensualite_hors,
                'mensualite_avec_assurance': mensualite_avec,
                'tableau': amortissement_data
            }
            
        except Exception as e:
            st.error(f"‚ùå Erreur donn√©es amortissement : {str(e)}")
            return None
        except Exception as e:
            st.error(f"‚ùå Erreur r√©cup√©ration charges : {str(e)}")
            return None
    
    def export_to_excel(self, property_data):
        """G√©n√®re un lien de t√©l√©chargement du Google Sheet modifi√©"""
        try:
            st.info("üì§ Pr√©paration du t√©l√©chargement Google Sheets...")
            
            # URL de t√©l√©chargement direct Excel de Google Sheets
            download_url = f"https://docs.google.com/spreadsheets/d/{GOOGLE_SHEET_ID}/export?format=xlsx"
            
            # Nom du fichier pour le t√©l√©chargement
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"Rendimo_Analyse_{property_data.get('city', 'Bien')}_{timestamp}.xlsx"
            
            st.markdown("---")
            st.markdown("### üì• **T√©l√©charger votre analyse compl√®te**")
            
            st.markdown(f"""
            üéØ **Votre Google Sheet personnalis√© est pr√™t !**
            
            ‚úÖ **Formatage complet** : Couleurs, bordures, images  
            ‚úÖ **Formules calcul√©es** : Tous les r√©sultats financiers  
            ‚úÖ **Donn√©es √† jour** : Bas√©es sur votre formulaire  
            
            üëá **Cliquez sur le bouton ci-dessous pour t√©l√©charger :**
            """)
            
            # Bouton de t√©l√©chargement avec lien direct
            st.markdown(f"""
            <div style="text-align: center; margin: 20px 0;">
                <a href="{download_url}" download="{filename}" target="_blank">
                    <button style="
                        background-color: #4CAF50;
                        color: white;
                        padding: 15px 32px;
                        text-align: center;
                        text-decoration: none;
                        display: inline-block;
                        font-size: 16px;
                        margin: 4px 2px;
                        cursor: pointer;
                        border: none;
                        border-radius: 8px;
                        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
                    ">
                        üìä T√©l√©charger l'Excel avec mise en forme compl√®te
                    </button>
                </a>
            </div>
            """, unsafe_allow_html=True)
            
            # Lien alternatif en cas de probl√®me
            st.markdown(f"""
            **üîó Lien direct (si le bouton ne fonctionne pas) :**  
            [`{filename}`]({download_url})
            """)
            
            # ============================================================================
            # INFORMATIONS ADDITIONNELLES
            # ============================================================================
            
            with st.expander("‚ÑπÔ∏è Informations sur le t√©l√©chargement"):
                st.markdown(f"""
                **üìã D√©tails du fichier :**
                - **Nom :** `{filename}`
                - **Format :** Excel (.xlsx)
                - **Source :** Google Sheets avec formules calcul√©es
                - **Contenu :** Toutes les feuilles avec vos donn√©es
                
                **üé® Formatage pr√©serv√© :**
                - ‚úÖ Couleurs des cellules
                - ‚úÖ Bordures et styles
                - ‚úÖ Images et graphiques
                - ‚úÖ Mise en forme conditionnelle
                - ‚úÖ Formules et calculs
                
                **üí° Note :** Le t√©l√©chargement s'effectue directement depuis Google Sheets, 
                garantissant que vous obtenez exactement la m√™me mise en forme que votre template !
                """)
            
            # Retourner l'URL pour d'autres usages si n√©cessaire
            return download_url
            
        except Exception as e:
            st.error(f"‚ùå Erreur g√©n√©ration lien t√©l√©chargement : {str(e)}")
            return None